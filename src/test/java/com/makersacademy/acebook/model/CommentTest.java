package com.makersacademy.acebook.model;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;

public class CommentTest {

    private User testUser = new User("test@gmail.com");
    private Post post1 = new Post("post 1", testUser);
    private Comment comment1 = new Comment("comment 1", post1, testUser);

    // 1. Test the default constructor
    @Test
    public void defaultConstructorWorks() {
        Comment comment = new Comment();
        assertNotNull(comment); // Ensure the object is created
    }

    // 2. Test the parameterized constructor
    @Test
    public void parameterizedConstructorWorks() {
        Comment comment = new Comment("This is a test comment", post1, testUser);
        assertThat(comment.getContent(), containsString("This is a test comment"));
        assertThat(comment.getPost(), is(post1)); // Ensure the post is correctly set
        assertThat(comment.getUser(), is(testUser)); // Ensure the user is correctly set
    }

    // 3. Test getter for content
    @Test
    public void commentHasContent() {
        assertThat(comment1.getContent(), containsString("comment 1"));
    }

    // 4. Test setter for content
    @Test
    public void canSetContent() {
        comment1.setContent("Updated comment");
        assertThat(comment1.getContent(), containsString("Updated comment"));
    }

    // 5. Test getter for post
    @Test
    public void commentHasPost() {
        assertThat(comment1.getPost().getContent(), containsString("post 1"));
    }

    // 6. Test setter for post
    @Test
    public void canSetPost() {
        Post newPost = new Post("New post content", testUser);
        comment1.setPost(newPost);
        assertThat(comment1.getPost().getContent(), containsString("New post content"));
    }

    // 7. Test getter for user
    @Test
    public void commentHasUser() {
        assertThat(comment1.getUser().getUsername(), containsString("test@gmail.com"));
    }

    // 8. Test setter for user
    @Test
    public void canSetUser() {
        User newUser = new User("newuser@gmail.com");
        comment1.setUser(newUser);
        assertThat(comment1.getUser().getUsername(), containsString("newuser@gmail.com"));
    }

    // 9. Test getter for id (though id will usually be auto-generated by JPA)
    @Test
    public void commentHasId() {
        comment1.setId(1L); // Manually set the ID for testing
        assertThat(comment1.getId(), is(1L));
    }

    // 10. Test setter for id
    @Test
    public void canSetId() {
        comment1.setId(2L);
        assertThat(comment1.getId(), is(2L));
    }
}
